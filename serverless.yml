# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: listing-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-west-2
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.listingsTableName}

custom:
  listingsTableName: listings-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  getListing:
    handler: api.getListing
    name: get-listing
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: listing/{listingId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt BusinessListings.Arn
  createListing:
    handler: api.createListing
    name: create-listing
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: listing
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt BusinessListings.Arn
  updateListing:
    handler: api.updateListing
    name: update-listing
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: listing/{listingId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt BusinessListings.Arn
  deleteListing:
    handler: api.deleteListing
    name: delete-listing
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: listing/{listingId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt BusinessListings.Arn
  getAllListings:
    handler: api.getAllListings
    name: get-all-listings
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: listings/{categoryId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt BusinessListings.Arn

resources:
  Resources:
    BusinessListings:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.listingsTableName}
        AttributeDefinitions:
          - AttributeName: listingId
            AttributeType: S
        KeySchema:
          - AttributeName: listingId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1